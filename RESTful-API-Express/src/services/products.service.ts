import createHttpErorr from "http-errors";
import productModel from "../models/product.model";

const getAll = async (query: any) => {

    //L·∫•y ra c√°c tham s·ªë truy·ªÅn v√†o
    //page = query.page, n·∫øu page kh√¥ng t·ªìn t·∫°i th√¨ m·∫∑c ƒë·ªãnh l√† 1
    const { page = 1, limit = 10, sort_type = 'desc', sort_by = 'createdAt' } = query;

    //N·∫øu t·ªìn t·∫°i sortType v√† sortBy th√¨ s·∫Ω s·∫Øp x·∫øp theo sortType v√† sortBy
    //N·∫øu kh√¥ng t·ªìn t·∫°i th√¨ s·∫Ω s·∫Øp x·∫øp theo createdAt
    let sortObject = {};
    sortObject = { ...sortObject, [sort_by]: sort_type === 'desc' ? -1 : 1 };

    console.log('<<=== üöÄsortObject  ===>>', sortObject);

    //T√¨m ki·∫øm theo ƒëi·ªÅu ki·ªán
    let where = {};
    //N·∫øu c√≥ t√¨m ki·∫øm theo t√™n s·∫£n ph·∫©m
    if (query.product_name && query.product_name.length > 0) {
        where = { ...where, product_name: { $regex: query.product_name, $options: 'i' } };
    }
    //N·∫øu t√¨m ki·∫øm theo danh m·ª•c
    if (query.category && query.category.length > 0) {
        where = { ...where, category: query.category };
    }
    //N·∫øu t√¨m ki·∫øm theo th∆∞∆°ng hi·ªáu
    if (query.brand_id && query.brand_id.length > 0) {
        where = { ...where, brand_id: query.brand_id };
    }

    //Th√™m c√°c ƒëi·ªÅu ki·ªán kh√°c n·∫øu c·∫ßn

    const products = await productModel
        .find(where)
        .populate('category', 'category_name')
        .populate('brand_id', 'brand_name')
        .skip((page - 1) * limit)
        .limit(limit)
        .sort({ ...sortObject });

    //ƒê·∫øm t·ªïng s·ªë record hi·ªán c√≥ c·ªßa collection Product
    const count = await productModel.countDocuments(where);

    return {
        products,
        //ƒê·ªÉ ph√¢n trang
        pagination: {
            totalRecord: count,
            limit,
            page
        }
    };
};

const getById = async (id: String) => {
    const product = await productModel.findById(id)
    if (!product) {
        throw createHttpErorr(400, 'Product not found');
    }
    return product;
}

const create = async (payload: any) => {
    //Ki·ªÉm tra xem c√≥ t·ªìn t·∫°i s·∫£n ph√¢m tr√πng nhau hay kh√¥ng
    const productExist = await productModel.findOne({ product_name: payload.product_name });
    if (productExist) {
        throw createHttpErorr(400, 'Product already exists')
    }
    //T·∫°o s·∫£n ph·∫©m m·ªõi
    // const product = new productModel(payload); // kh√¥ng n√™n l√†m theo c√°ch n√†y
    /**
     * N√™n chi ti·∫øt c√°c tr∆∞·ªùng ra ƒë·ªÉ tr√°nh client g·ª≠i v√† l∆∞u tr·ªØ d·ªØa li·ªáu kh√¥ng mong mu·ªën 
     */
    const product = new productModel({
        product_name: payload.product_name,
        price: payload.price,
        discount: payload.payload,
        description: payload.description,
        model_year: payload.model_year,
        stock: payload.stock,
        slug: payload.slug,
        thumbnail: payload.thumbnail,
        category: payload.category,
        brand_id: payload.brand_id,
    })
    await product.save();
    return product;
}

const updateById = async (id: string, payload: any) => {
    //Ki·ªÉm tra xem s·∫£n ph·∫©m c√≥ t·ªìn t·∫°i kh√¥ng x√©t = id
    const product = await getById(id);
    /**
     * Ki·ªÉm tra xem t√™n s·∫£n ph·∫©m b·∫°n v·ª´a ƒë·ªïi c√≥ kh√°c v·ªõi t√™n s·∫£n ph·∫©m hi·ªán t·∫°i kh√¥ng
     * N·∫øu kh√°c th√¨ ki·ªÉm tra xem c√≥ s·∫£n ph·∫©m n√†o kh√°c c√≥ t√™n gi·ªëng kh√¥ng
     */
    const productExist = await productModel.findOne({ product_name: payload.product_name })
    if (productExist) {
        throw createHttpErorr(400, 'Product already exisis')
    }
    Object.assign(product, payload) // Tr·ªôn d·ªØ li·ªáu
    await product.save();
    return product;
}

const deleteById = async (id: String) => {

    //Ki·ªÉm tra xem x·∫£n ph·∫©m c√≥ t·ªìn t·∫°i hay kh√¥ng b·∫±ng id 
    const product = await getById(id);
    //X√≥a s·∫£n ph·∫©m 
    await productModel.deleteOne({ _id: product._id });
    return product;
}

export default { getAll, getById, create, updateById, deleteById }